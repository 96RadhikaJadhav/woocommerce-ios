import Foundation
import Alamofire

{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% for model in models %}
  {% for name, entity in model.entities %}
    {% if entity.name == param.entityName %}
      {% set superclass %}{{ model.entities[entity.superEntity].className|default:"Decodable" }}{% endset %}
      {% set entityClassName %}{{ entity.className|default:"NSManagedObject" }}{% endset %}
      
      
      
/// ProductVariation: Remote Endpoints
///
public class {{ entity.name }}Remote: Remote {

    /// Retrieves all of the `{{ entity.name }}`s available.
    ///
    /// - Parameters:
    ///     - siteID: Site for which we'll fetch remote models.
    ///     - context: view or edit. Scope under which the request is made;
    ///                determines fields present in response. Default is view.
    ///     - pageNumber: Number of page that should be retrieved.
    ///     - pageSize: Number of models to be retrieved per page.
    ///     - completion: Closure to be executed upon completion.
    ///
    public func loadAll(for siteID: Int64,
                        context: String? = nil,
                        pageNumber: Int = Default.pageNumber,
                        pageSize: Int = Default.pageSize,
                        completion: @escaping ([{{ entity.name }}]?, Error?) -> Void) {
        let parameters = [
            ParameterKey.page: String(pageNumber),
            ParameterKey.perPage: String(pageSize),
            ParameterKey.contextKey: context ?? Default.context
        ]

        let path = "\(Path.models)"
        let request = JetpackRequest(wooApiVersion: .mark3, method: .get, siteID: Int(siteID), path: path, parameters: parameters)
        let mapper = {{ entity.name }}ListMapper(siteID: siteID)
        enqueue(request, mapper: mapper, completion: completion)
    }


    /// Retrieves a specific `{{ entity.name }}`.
    ///
    /// - Parameters:
    ///     - siteID: Site which hosts the {{ entity.name }}.
    ///     - remoteID: Identifier of the {{ entity.name }} on the server.
    ///     - completion: Closure to be executed upon completion.
    ///
    public func loadProduct(for siteID: Int, remoteID: Int, completion: @escaping ({{ entity.name }}?, Error?) -> Void) {
        let path = "\(Path.models)/\(remoteID)"
        let request = JetpackRequest(wooApiVersion: .mark3, method: .get, siteID: siteID, path: path, parameters: nil)
        let mapper = {{ entity.name }}Mapper(siteID: siteID)

        enqueue(request, mapper: mapper, completion: completion)
    }
}


// MARK: - Constants
//
public extension {{ entity.name }}Remote {
    enum Default {
        public static let pageSize: Int   = 25
        public static let pageNumber: Int = 1
        public static let context: String = "view"
    }

    private enum Path {
        static let models = "" // TODO: update path
    }

    private enum ParameterKey {
        static let page: String       = "page"
        static let perPage: String    = "per_page"
        static let contextKey: String = "context"
    }
}
    {% endif %}
    {% endfor %}
{% endfor %}
