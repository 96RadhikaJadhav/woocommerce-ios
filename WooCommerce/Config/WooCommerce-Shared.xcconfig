//
// WooCommerce-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 5/11/20
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

// Asset Catalog App Icon Set Name
// 
// Name of an asset catalog app icon set whose contents will be merged into the
// `Info.plist`.

ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon

// Code Signing Style
// 
// This setting specifies the method used to acquire and locate signing assets. Choose
// `Automatic` to let Xcode automatically create and update profiles, app IDs, and
// certificates. Choose `Manual` to create and update these yourself on the developer
// website.

CODE_SIGN_STYLE = Manual

// Enable Bitcode
// 
// Activating this setting indicates that the target or project should generate bitcode
// during compilation for platforms and architectures that support it. For Archive
// builds, bitcode will be generated in the linked binary for submission to the App
// Store. For other builds, the compiler and linker will check whether the code complies
// with the requirements for bitcode generation, but will not generate actual bitcode.

ENABLE_BITCODE = NO

// Info.plist File
// 
// The project-relative path to the property list file that contains the `Info.plist`
// information used by bundles. For details on information property list files, see
// [Information Property List
// Files](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPRuntimeConfig/Articles/ConfigFiles.html#//apple_ref/doc/uid/20002091-CJBJIEDH)
// in [Runtime Configuration
// Guidelines](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPRuntimeConfig/000-Introduction/introduction.html).

INFOPLIST_FILE = $(SRCROOT)/Resources/Info.plist

// Info.plist Preprocessor Prefix File
// 
// Implicitly include the given file when preprocessing the `Info.plist` file. The path
// given should either be a project relative path or an absolute path.

INFOPLIST_PREFIX_HEADER = DerivedSources/InfoPlist.h

// Preprocess Info.plist File
// 
// Preprocess the `Info.plist` file using the C Preprocessor.

INFOPLIST_PREPROCESS = YES

// iOS Deployment Target
// 
// Code will load on this and later versions of iOS. Framework APIs that are unavailable
// in earlier versions will be weak-linked; your code should check for null function
// pointers or specific system versions before calling newer APIs.

IPHONEOS_DEPLOYMENT_TARGET = 12.0

// Runpath Search Paths
// 
// This is a list of paths to be added to the `runpath` search path list for the image
// being created. At runtime, `dyld` uses the `runpath` when searching for dylibs whose
// load path begins with `@rpath/`. See [Dynamic Library Programming
// Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).

LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks

// Other Swift Flags
// 
// A list of additional flags to pass to the Swift compiler.

OTHER_SWIFT_FLAGS = $(inherited)

// Product Name
// 
// This is the basename of the product generated by the target.

PRODUCT_NAME = $(TARGET_NAME)

SECRETS_PATH = $(SRCROOT)/../.configure-files/woo_app_credentials.json

// Swift Language Version
// 
// 

SWIFT_VERSION = 5.0

// Targeted Device Families
// 
// The build system uses the selected device to set the correct value for the
// `UIDeviceFamily` key it adds to the target's `Info.plist` file. This also drives the
// --target-device flag to actool, which determines the idioms selected during catalog
// compilation.

TARGETED_DEVICE_FAMILY = 1,2

// User Header Search Paths
// 
// This is a list of paths to folders to be searched by the compiler for included or
// imported user header files (those headers listed in quotes) when compiling C,
// Objective-C, C++, or Objective-C++. Paths are delimited by whitespace, so any paths
// with spaces in them need to be properly quoted. See `ALWAYS_SEARCH_USER_PATHS` for
// more details on how this setting is used. If the compiler doesn't support the concept
// of user headers, then the search paths are prepended to the any existing header search
// paths defined in `HEADER_SEARCH_PATHS`.

USER_HEADER_SEARCH_PATHS =